
# Note: _zero and _succ are globals, used to encode numbers
# zero is a channel used by ZERO to provide fresh zeroes on demand, and
# similarly for one, two.

def ZERO = !(&c. (_zero -> c. 0 | c -> zero. 0));
def ONE = !(&d. (_succ -> d. _zero -> d. 0 | d -> one. 0));
def TWO = !(&c. (_succ -> c. _succ -> c. _zero -> c. 0 | c -> two. 0));

def INC = !&incremented. &partially_consumed_number_channel. (
  (
    connection <- inc
    .n <- connection
    .incremented -> connection
    ._succ -> incremented
    .n -> partially_consumed_number_channel
    .0
  )
  | !(
    partially_consumed_number <- partially_consumed_number_channel
    .token <- partially_consumed_number
    .(
      [token = _succ]. _succ -> incremented. partially_consumed_number -> partially_consumed_number_channel. 0
      + [token = _zero]. _zero -> incremented. 0
    )
  )
);

# Expected output: 
#   _succ -> result. 0
# | _zero -> result. 0
# | ...
ZERO | INC | x <- zero. &r. r->inc. x -> r. v <- r. !(x <- v. x -> result. 0);

# Expected output: 
#   _succ -> result. 0
# | _succ -> result. 0
# | _zero -> result. 0
# | ...
ONE | INC | x <- one. &r. r->inc. x -> r. v <- r. !(x <- v. x -> result. 0);


# The following two tests make sure that the resulting number outputs _succ before _zero.
# Expected output:
#   _succ -> a. 0
# | _succ -> b. 0
# | _succ -> c. 0
# | _zero -> d. 0
# | ...
# With no something -> e. 0 at the top level
TWO | INC | x <- two. &r. r->inc. x -> r. v <- r.
                          x <- v. (x -> a. 0 | 
                          x <- v. (x -> b. 0 |
                          x <- v. (x -> c. 0 |
                          x <- v. (x -> d. 0 |
                          x <- v. (x -> e. 0)))));

# Expected output:
#   _succ -> a. 0
# | _succ -> b. 0
# | _succ -> c. 0
# | _zero -> d. 0
# | ...
# With no something -> e. 0 at the top level
ONE | INC | x <- one. &r. r->inc. x -> r. v <- r. 
                      &r. r->inc. v -> r. v2 <- r. 
                        x <- v2. (x -> a. 0 | 
                        x <- v2. (x -> b. 0 |
                        x <- v2. (x -> c. 0 |
                        x <- v2. (x -> d. 0 |
                        x <- v2. (x -> e. 0)))));